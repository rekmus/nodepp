/* --------------------------------------------------------------------------

    MIT License

    Copyright (c) 2020-2024 Jurek Muszynski (rekmus)

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

-----------------------------------------------------------------------------

    Table access base class
    nodepp.org

-------------------------------------------------------------------------- */

#include "npp.h"

#ifdef __cplusplus

#ifdef NPP_MYSQL

#include <stdexcept>
#include <cstdlib>      /* atoi */

#include "npp_mysql.h"


/* maintain a single database connection */

std::string Cdb::dbName_="";
MYSQL *Cdb::dbConn_=NULL;
bool Cdb::open_=false;


/* --------------------------------------------------------------------------
   Constructor
-------------------------------------------------------------------------- */
Cdb::Cdb()
{
//    std::cout << "Cdb Constructor\n";

    if ( !open_ )
        throw std::runtime_error("DBOpen not called");

    skip_ = 0;
    first_ = CDB_DEFAULT_FIRST;
    firstGet_ = true;
    firstUpdate_ = true;
    firstInsert_ = true;
    firstDelete_ = true;
    firstSet_ = true;
}


/* --------------------------------------------------------------------------
   Destructor
-------------------------------------------------------------------------- */
Cdb::~Cdb()
{
//    std::cout << "Cdb Destructor\n";
}


/* --------------------------------------------------------------------------
   Open a database
-------------------------------------------------------------------------- */
void Cdb::DBOpen(const std::string& dbName, const std::string& user, const std::string& password, const std::string& host, int port)
{
//    std::cout << "DBOpen\n";

    if ( open_ )
    {
//        std::cout << "was open\n";

        if ( dbName == dbName_ )
            return;
        else
            DBClose();
    }

    if ( NULL == dbConn_ && NULL == (dbConn_=mysql_init(NULL)) )
    {
        throw std::runtime_error("mysql_init");
        return;
    }

    dbName_ = dbName;

#ifdef NPP_MYSQL_RECONNECT
    my_bool reconnect = 1;
    mysql_options(dbConn_, MYSQL_OPT_RECONNECT, &reconnect);
#endif

    if ( G_dbDisableEncryption > 0 )
    {
        unsigned ssl_mode = SSL_MODE_DISABLED;
        mysql_options(dbConn_, MYSQL_OPT_SSL_MODE, &ssl_mode);
    }
    else    /* explore encryption options */
    {
#ifdef MYSQL_OPT_SSL_KEY
        if ( G_dbSSLKey[0] )    /* The path name of the client private key file */
            mysql_options(dbConn_, MYSQL_OPT_SSL_KEY, G_dbSSLKey);
#endif

#ifdef MYSQL_OPT_SSL_CERT
        if ( G_dbSSLCert[0] )   /* The path name of the client public key certificate file */
            mysql_options(dbConn_, MYSQL_OPT_SSL_CERT, G_dbSSLCert);
#endif

#ifdef MYSQL_OPT_SSL_CA
        if ( G_dbSSLCA[0] )     /* The path name of the Certificate Authority (CA) certificate file */
            mysql_options(dbConn_, MYSQL_OPT_SSL_CA, G_dbSSLCA);
#endif

#ifdef MYSQL_OPT_SSL_CAPATH
        if ( G_dbSSLCAPath[0] ) /* The path name of the directory that contains trusted SSL CA certificate files */
            mysql_options(dbConn_, MYSQL_OPT_SSL_CAPATH, G_dbSSLCAPath);
#endif

#ifdef MYSQL_OPT_SSL_CRL
        if ( G_dbSSLCRL[0] )    /* The path name of the file containing certificate revocation lists */
            mysql_options(dbConn_, MYSQL_OPT_SSL_CRL, G_dbSSLCRL);
#endif

#ifdef MYSQL_OPT_SSL_CRLPATH
        if ( G_dbSSLCRLPath[0] )    /* The path name of the directory that contains certificate revocation list files */
            mysql_options(dbConn_, MYSQL_OPT_SSL_CRLPATH, G_dbSSLCRLPath);
#endif

#ifdef MYSQL_OPT_TLS_VERSION
        if ( G_dbSSLTLSVersion[0] ) /* The encryption protocols the client permits */
            mysql_options(dbConn_, MYSQL_OPT_TLS_VERSION, G_dbSSLTLSVersion);
#endif

#ifdef MYSQL_OPT_SSL_CIPHER
        if ( G_dbSSLCipher[0] ) /* The list of encryption ciphers the client permits for connections that use TLS protocols up through TLSv1.2 */
            mysql_options(dbConn_, MYSQL_OPT_SSL_CIPHER, G_dbSSLCipher);
#endif

#ifdef MYSQL_OPT_TLS_CIPHERSUITES
        if ( G_dbSSLCipherSuites[0] )   /* The list of encryption ciphersuites the client permits for connections that use TLSv1.3 */
            mysql_options(dbConn_, MYSQL_OPT_TLS_CIPHERSUITES, G_dbSSLCipherSuites);
#endif

        if ( G_dbSSLMode > 0 )
            mysql_options(dbConn_, MYSQL_OPT_SSL_MODE, &G_dbSSLMode);
    }

    bool localhost;

    if ( host.empty() || host=="localhost" || host=="127.0.0.1" )
        localhost = true;
    else
        localhost = false;

    if ( !localhost && port == 0 )
        port = CDB_DEFAULT_PORT;

    DBG("Trying mysql_real_connect for dbConn_...");

    if ( NULL == mysql_real_connect(dbConn_, localhost?NULL:host.c_str(), user.empty()?"root":user.c_str(), password.c_str(), dbName.c_str(), port, NULL, 0) )
    {
        if ( mysql_errno(dbConn_) == CR_SSL_CONNECTION_ERROR && G_dbDisableEncryption == 0 )
        {
            WAR("Couldn't connect to the database with SSL. Falling back to unencrypted connection...");

            unsigned ssl_mode = SSL_MODE_DISABLED;
            mysql_options(dbConn_, MYSQL_OPT_SSL_MODE, &ssl_mode);

            if ( NULL == mysql_real_connect(dbConn_, localhost?NULL:host.c_str(), user.empty()?"root":user.c_str(), password.c_str(), dbName.c_str(), port, NULL, 0) )
            {
                ThrowSQL("mysql_real_connect");
                return;
            }
        }
        else    /* different error */
        {
            ThrowSQL("mysql_real_connect");
            return;
        }
    }

    DBG("mysql_real_connect OK");

//    std::cout << "DBOpen successful\n";

    open_ = true;
}


/* --------------------------------------------------------------------------
   Close database
-------------------------------------------------------------------------- */
void Cdb::DBClose()
{
    if ( !open_ ) return;

    if ( dbConn_ )
        mysql_close(dbConn_);

    open_ = false;
}


/* --------------------------------------------------------------------------
   Set isolation to ...
-------------------------------------------------------------------------- */
void Cdb::SetIsolation(int level)
{
}


/* --------------------------------------------------------------------------
   Set lock mode to ...
-------------------------------------------------------------------------- */
void Cdb::SetLockMode(int mode)
{
}


/* --------------------------------------------------------------------------
   Begin a transaction
-------------------------------------------------------------------------- */
void Cdb::Begin()
{
    if ( mysql_real_query(dbConn_, "BEGIN", 5) )
        ThrowSQL("mysql_begin");
}


/* --------------------------------------------------------------------------
   Commit transaction
-------------------------------------------------------------------------- */
void Cdb::Commit()
{
    if ( mysql_commit(dbConn_) )
        ThrowSQL("mysql_commit");
}


/* --------------------------------------------------------------------------
   Rollback transaction
-------------------------------------------------------------------------- */
void Cdb::Rollback()
{
    if ( mysql_rollback(dbConn_) )
        ThrowSQL("mysql_rollback");
}


/* --------------------------------------------------------------------------
   EXECUTE any SQL query without preparing
-------------------------------------------------------------------------- */
void Cdb::Execute(const std::string& query)
{
    if ( mysql_query(dbConn_, query.c_str()) )
        ThrowSQL("mysql_query");
}


/* --------------------------------------------------------------------------
   Compose message & throw exception
-------------------------------------------------------------------------- */
void Cdb::ThrowSQL(const char *action)
{
//    std::cout << "ThrowSQL" << std::endl;
    char ebuf[1024];
    sprintf(ebuf, "%s | %u | %s", action, mysql_errno(dbConn_), mysql_error(dbConn_));
//    std::cout << "ebuf [" << ebuf << "]" << std::endl;
    throw std::runtime_error(ebuf);
}


/* --------------------------------------------------------------------------
   Set SKIP SQL query option
-------------------------------------------------------------------------- */
void Cdb::SetSkip(unsigned skip)
{
    skip_ = skip;
}


/* --------------------------------------------------------------------------
   Set FIRST SQL query option
-------------------------------------------------------------------------- */
void Cdb::SetFirst(unsigned first)
{
    first_ = first;
}


/* --------------------------------------------------------------------------
   Define WHERE clause & PREPARE SQL statement
-------------------------------------------------------------------------- */
void Cdb::PrepareCursor(const std::string& where)
{
    char q[CDB_SQLBUF];
    sprintf(q, "SELECT %s FROM %s%s%s LIMIT %u OFFSET %u", columnList_.c_str(), table_.c_str(), where.empty()?"":" WHERE ", where.empty()?"":where.c_str(), first_, skip_);

//    std::cout << "PREPARE: " << q << '\n';

    if ( mysql_stmt_prepare(s_, q, strlen(q)) )
        ThrowSQL("Cdb::PrepareCursor | mysql_stmt_prepare");
}


/* --------------------------------------------------------------------------
   Complete & PREPARE SQL query
-------------------------------------------------------------------------- */
void Cdb::PrepareCount(const std::string& where)
{
    char q[CDB_SQLBUF];
    sprintf(q, "SELECT COUNT(*) FROM %s%s%s", table_.c_str(), where.empty()?"":" WHERE ", where.empty()?"":where.c_str());

//    std::cout << "PREPARE: " << q << '\n';

    if ( mysql_stmt_prepare(sc_, q, strlen(q)) )
        ThrowSQL("Cdb::PrepareCount | mysql_stmt_prepare");
}








/* --------------------------------------------------------------------------
   DECLARE & OPEN SQL cursor based on PREPAREd statement
-------------------------------------------------------------------------- */
void Cdb::OpenCursor()
{
    openCursor(s_);
}


void Cdb::OpenCursor(int val1)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}



void Cdb::OpenCursor(int val1, int val2)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}



#ifdef CDB_3_ARGS

void Cdb::OpenCursor(int val1, int val2, int val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, unsigned val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, float val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, double val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, const std::string& val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, int val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, unsigned val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, float val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, double val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, const std::string& val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, int val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, unsigned val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, float val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, double val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, const std::string& val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, int val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, unsigned val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, float val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, double val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, const std::string& val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, int val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, unsigned val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, float val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, double val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, const std::string& val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, int val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, unsigned val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, float val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, double val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, const std::string& val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, int val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, unsigned val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, float val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, double val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, const std::string& val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, int val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, unsigned val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, float val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, double val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, const std::string& val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, int val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, unsigned val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, float val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, double val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, const std::string& val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, int val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, unsigned val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, float val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, double val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, const std::string& val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, int val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, unsigned val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, float val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, double val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, const std::string& val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, int val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, unsigned val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, float val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, double val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, const std::string& val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, int val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, unsigned val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, float val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, double val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, const std::string& val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, int val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, unsigned val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, float val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, double val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, const std::string& val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, int val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, unsigned val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, float val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, double val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, const std::string& val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, int val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, unsigned val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, float val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, double val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, const std::string& val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, int val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, unsigned val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, float val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, double val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, const std::string& val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, int val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, unsigned val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, float val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, double val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, const std::string& val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, int val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, unsigned val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, float val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, double val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, const std::string& val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, int val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, unsigned val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, float val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, double val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, const std::string& val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, int val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, unsigned val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, float val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, double val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, const std::string& val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, int val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, unsigned val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, float val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, double val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, const std::string& val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, int val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, unsigned val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, float val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, double val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, const std::string& val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, int val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, unsigned val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, float val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, double val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, const std::string& val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, int val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, unsigned val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, float val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, double val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, const std::string& val3)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}



#endif   /* CDB_3_ARGS */

#ifdef CDB_4_ARGS

void Cdb::OpenCursor(int val1, int val2, int val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, int val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, int val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, int val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, int val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, unsigned val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, unsigned val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, unsigned val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, unsigned val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, unsigned val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, float val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, float val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, float val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, float val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, float val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, double val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, double val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, double val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, double val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, double val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, const std::string& val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, const std::string& val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, const std::string& val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, const std::string& val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, int val2, const std::string& val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, int val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, int val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, int val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, int val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, int val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, unsigned val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, unsigned val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, unsigned val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, unsigned val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, unsigned val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, float val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, float val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, float val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, float val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, float val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, double val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, double val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, double val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, double val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, double val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, const std::string& val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, const std::string& val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, const std::string& val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, const std::string& val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, unsigned val2, const std::string& val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, int val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, int val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, int val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, int val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, int val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, unsigned val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, unsigned val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, unsigned val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, unsigned val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, unsigned val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, float val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, float val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, float val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, float val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, float val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, double val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, double val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, double val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, double val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, double val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, const std::string& val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, const std::string& val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, const std::string& val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, const std::string& val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, float val2, const std::string& val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, int val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, int val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, int val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, int val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, int val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, unsigned val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, unsigned val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, unsigned val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, unsigned val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, unsigned val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, float val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, float val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, float val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, float val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, float val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, double val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, double val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, double val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, double val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, double val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, const std::string& val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, const std::string& val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, const std::string& val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, const std::string& val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, double val2, const std::string& val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, int val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, int val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, int val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, int val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, int val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, unsigned val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, unsigned val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, unsigned val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, unsigned val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, unsigned val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, float val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, float val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, float val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, float val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, float val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, double val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, double val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, double val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, double val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, double val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, const std::string& val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, const std::string& val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, const std::string& val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, const std::string& val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(int val1, const std::string& val2, const std::string& val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, int val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, int val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, int val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, int val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, int val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, unsigned val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, unsigned val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, unsigned val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, unsigned val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, unsigned val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, float val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, float val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, float val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, float val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, float val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, double val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, double val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, double val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, double val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, double val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, const std::string& val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, const std::string& val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, const std::string& val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, const std::string& val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, int val2, const std::string& val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, int val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, int val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, int val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, int val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, int val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, unsigned val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, unsigned val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, unsigned val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, unsigned val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, unsigned val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, float val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, float val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, float val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, float val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, float val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, double val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, double val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, double val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, double val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, double val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, const std::string& val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, const std::string& val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, const std::string& val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, const std::string& val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, unsigned val2, const std::string& val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, int val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, int val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, int val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, int val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, int val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, unsigned val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, unsigned val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, unsigned val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, unsigned val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, unsigned val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, float val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, float val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, float val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, float val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, float val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, double val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, double val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, double val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, double val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, double val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, const std::string& val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, const std::string& val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, const std::string& val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, const std::string& val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, float val2, const std::string& val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, int val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, int val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, int val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, int val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, int val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, unsigned val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, unsigned val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, unsigned val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, unsigned val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, unsigned val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, float val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, float val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, float val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, float val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, float val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, double val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, double val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, double val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, double val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, double val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, const std::string& val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, const std::string& val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, const std::string& val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, const std::string& val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, double val2, const std::string& val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, int val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, int val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, int val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, int val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, int val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, unsigned val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, unsigned val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, unsigned val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, unsigned val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, unsigned val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, float val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, float val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, float val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, float val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, float val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, double val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, double val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, double val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, double val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, double val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, const std::string& val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, const std::string& val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, const std::string& val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, const std::string& val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(unsigned val1, const std::string& val2, const std::string& val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_LONG;
    bnd_[0].is_unsigned = true;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, int val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, int val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, int val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, int val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, int val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, unsigned val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, unsigned val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, unsigned val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, unsigned val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, unsigned val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, float val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, float val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, float val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, float val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, float val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, double val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, double val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, double val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, double val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, double val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, const std::string& val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, const std::string& val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, const std::string& val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, const std::string& val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, int val2, const std::string& val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, int val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, int val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, int val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, int val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, int val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, unsigned val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, unsigned val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, unsigned val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, unsigned val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, unsigned val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, float val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, float val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, float val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, float val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, float val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, double val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, double val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, double val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, double val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, double val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, const std::string& val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, const std::string& val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, const std::string& val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, const std::string& val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, unsigned val2, const std::string& val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, int val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, int val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, int val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, int val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, int val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, unsigned val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, unsigned val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, unsigned val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, unsigned val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, unsigned val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, float val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, float val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, float val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, float val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, float val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, double val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, double val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, double val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, double val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, double val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, const std::string& val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, const std::string& val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, const std::string& val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, const std::string& val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, float val2, const std::string& val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, int val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, int val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, int val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, int val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, int val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, unsigned val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, unsigned val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, unsigned val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, unsigned val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, unsigned val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, float val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, float val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, float val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, float val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, float val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, double val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, double val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, double val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, double val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, double val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, const std::string& val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, const std::string& val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, const std::string& val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, const std::string& val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, double val2, const std::string& val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, int val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, int val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, int val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, int val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, int val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, unsigned val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, unsigned val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, unsigned val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, unsigned val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, unsigned val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, float val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, float val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, float val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, float val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, float val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, double val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, double val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, double val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, double val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, double val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, const std::string& val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, const std::string& val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, const std::string& val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, const std::string& val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(float val1, const std::string& val2, const std::string& val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, int val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, int val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, int val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, int val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, int val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, unsigned val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, unsigned val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, unsigned val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, unsigned val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, unsigned val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, float val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, float val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, float val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, float val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, float val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, double val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, double val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, double val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, double val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, double val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, const std::string& val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, const std::string& val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, const std::string& val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, const std::string& val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, int val2, const std::string& val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, int val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, int val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, int val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, int val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, int val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, unsigned val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, unsigned val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, unsigned val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, unsigned val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, unsigned val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, float val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, float val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, float val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, float val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, float val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, double val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, double val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, double val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, double val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, double val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, const std::string& val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, const std::string& val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, const std::string& val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, const std::string& val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, unsigned val2, const std::string& val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, int val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, int val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, int val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, int val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, int val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, unsigned val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, unsigned val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, unsigned val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, unsigned val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, unsigned val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, float val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, float val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, float val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, float val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, float val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, double val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, double val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, double val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, double val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, double val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, const std::string& val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, const std::string& val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, const std::string& val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, const std::string& val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, float val2, const std::string& val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, int val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, int val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, int val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, int val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, int val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, unsigned val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, unsigned val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, unsigned val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, unsigned val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, unsigned val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, float val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, float val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, float val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, float val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, float val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, double val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, double val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, double val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, double val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, double val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, const std::string& val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, const std::string& val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, const std::string& val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, const std::string& val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, double val2, const std::string& val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, int val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, int val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, int val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, int val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, int val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, unsigned val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, unsigned val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, unsigned val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, unsigned val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, unsigned val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, float val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, float val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, float val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, float val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, float val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, double val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, double val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, double val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, double val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, double val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, const std::string& val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, const std::string& val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, const std::string& val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, const std::string& val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(double val1, const std::string& val2, const std::string& val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    bnd_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, int val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, int val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, int val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, int val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, int val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, unsigned val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, unsigned val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, unsigned val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, unsigned val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, unsigned val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, float val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, float val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, float val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, float val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, float val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, double val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, double val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, double val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, double val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, double val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, const std::string& val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, const std::string& val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, const std::string& val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, const std::string& val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, int val2, const std::string& val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, int val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, int val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, int val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, int val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, int val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, unsigned val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, unsigned val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, unsigned val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, unsigned val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, unsigned val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, float val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, float val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, float val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, float val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, float val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, double val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, double val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, double val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, double val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, double val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, const std::string& val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, const std::string& val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, const std::string& val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, const std::string& val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, unsigned val2, const std::string& val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_LONG;
    bnd_[1].is_unsigned = true;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, int val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, int val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, int val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, int val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, int val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, unsigned val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, unsigned val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, unsigned val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, unsigned val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, unsigned val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, float val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, float val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, float val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, float val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, float val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, double val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, double val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, double val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, double val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, double val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, const std::string& val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, const std::string& val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, const std::string& val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, const std::string& val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, float val2, const std::string& val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, int val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, int val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, int val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, int val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, int val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, unsigned val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, unsigned val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, unsigned val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, unsigned val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, unsigned val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, float val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, float val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, float val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, float val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, float val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, double val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, double val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, double val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, double val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, double val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, const std::string& val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, const std::string& val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, const std::string& val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, const std::string& val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, double val2, const std::string& val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    bnd_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, int val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, int val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, int val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, int val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, int val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, unsigned val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, unsigned val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, unsigned val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, unsigned val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, unsigned val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_LONG;
    bnd_[2].is_unsigned = true;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, float val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, float val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, float val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, float val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, float val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, double val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, double val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, double val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, double val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, double val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    bnd_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, const std::string& val3, int val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, const std::string& val3, unsigned val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_LONG;
    bnd_[3].is_unsigned = true;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, const std::string& val3, float val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, const std::string& val3, double val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    bnd_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bnd_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}


void Cdb::OpenCursor(const std::string& val1, const std::string& val2, const std::string& val3, const std::string& val4)
{
    memset(&bnd_, 0, sizeof(bnd_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bnd_[0].buffer_type = MYSQL_TYPE_STRING;
    bnd_[0].buffer = (char*)&sz_val1;
    bnd_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bnd_[1].buffer_type = MYSQL_TYPE_STRING;
    bnd_[1].buffer = (char*)&sz_val2;
    bnd_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bnd_[2].buffer_type = MYSQL_TYPE_STRING;
    bnd_[2].buffer = (char*)&sz_val3;
    bnd_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bnd_[3].buffer_type = MYSQL_TYPE_STRING;
    bnd_[3].buffer = (char*)&sz_val4;
    bnd_[3].length = &len4;

    if ( mysql_stmt_bind_param(s_, bnd_) )
        ThrowSQL("Cdb::OpenCursor | mysql_stmt_bind_param");

    openCursor(s_);
}



#endif   /* CDB_4_ARGS */





// ===========================================================================================
// End of OpenCursor
// ===========================================================================================









/* --------------------------------------------------------------------------
   EXECUTE PREPAREd COUNT(*) statement
-------------------------------------------------------------------------- */
unsigned Cdb::GetCount()
{
    return getCount(sc_);
}



unsigned Cdb::GetCount(int val1)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}



unsigned Cdb::GetCount(int val1, int val2)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}



#ifdef CDB_3_ARGS

unsigned Cdb::GetCount(int val1, int val2, int val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, unsigned val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, float val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, double val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, const std::string& val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, int val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, unsigned val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, float val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, double val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, const std::string& val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, int val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, unsigned val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, float val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, double val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, const std::string& val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, int val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, unsigned val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, float val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, double val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, const std::string& val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, int val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, unsigned val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, float val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, double val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, const std::string& val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, int val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, unsigned val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, float val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, double val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, const std::string& val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, int val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, unsigned val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, float val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, double val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, const std::string& val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, int val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, unsigned val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, float val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, double val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, const std::string& val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, int val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, unsigned val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, float val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, double val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, const std::string& val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, int val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, unsigned val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, float val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, double val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, const std::string& val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, int val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, unsigned val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, float val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, double val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, const std::string& val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, int val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, unsigned val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, float val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, double val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, const std::string& val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, int val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, unsigned val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, float val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, double val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, const std::string& val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, int val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, unsigned val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, float val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, double val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, const std::string& val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, int val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, unsigned val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, float val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, double val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, const std::string& val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, int val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, unsigned val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, float val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, double val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, const std::string& val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, int val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, unsigned val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, float val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, double val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, const std::string& val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, int val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, unsigned val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, float val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, double val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, const std::string& val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, int val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, unsigned val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, float val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, double val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, const std::string& val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, int val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, unsigned val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, float val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, double val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, const std::string& val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, int val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, unsigned val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, float val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, double val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, const std::string& val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, int val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, unsigned val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, float val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, double val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, const std::string& val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, int val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, unsigned val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, float val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, double val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, const std::string& val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, int val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, unsigned val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, float val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, double val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, const std::string& val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, int val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, unsigned val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, float val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, double val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, const std::string& val3)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}



#endif   /* CDB_3_ARGS */

#ifdef CDB_4_ARGS

unsigned Cdb::GetCount(int val1, int val2, int val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, int val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, int val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, int val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, int val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, unsigned val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, unsigned val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, unsigned val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, unsigned val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, unsigned val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, float val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, float val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, float val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, float val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, float val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, double val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, double val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, double val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, double val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, double val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, const std::string& val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, const std::string& val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, const std::string& val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, const std::string& val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, int val2, const std::string& val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, int val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, int val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, int val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, int val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, int val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, unsigned val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, unsigned val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, unsigned val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, unsigned val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, unsigned val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, float val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, float val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, float val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, float val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, float val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, double val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, double val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, double val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, double val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, double val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, const std::string& val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, const std::string& val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, const std::string& val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, const std::string& val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, unsigned val2, const std::string& val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, int val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, int val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, int val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, int val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, int val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, unsigned val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, unsigned val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, unsigned val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, unsigned val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, unsigned val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, float val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, float val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, float val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, float val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, float val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, double val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, double val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, double val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, double val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, double val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, const std::string& val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, const std::string& val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, const std::string& val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, const std::string& val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, float val2, const std::string& val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, int val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, int val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, int val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, int val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, int val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, unsigned val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, unsigned val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, unsigned val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, unsigned val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, unsigned val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, float val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, float val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, float val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, float val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, float val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, double val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, double val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, double val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, double val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, double val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, const std::string& val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, const std::string& val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, const std::string& val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, const std::string& val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, double val2, const std::string& val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, int val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, int val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, int val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, int val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, int val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, unsigned val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, unsigned val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, unsigned val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, unsigned val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, unsigned val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, float val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, float val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, float val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, float val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, float val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, double val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, double val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, double val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, double val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, double val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, const std::string& val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, const std::string& val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, const std::string& val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, const std::string& val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(int val1, const std::string& val2, const std::string& val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, int val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, int val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, int val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, int val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, int val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, unsigned val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, unsigned val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, unsigned val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, unsigned val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, unsigned val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, float val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, float val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, float val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, float val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, float val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, double val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, double val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, double val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, double val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, double val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, const std::string& val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, const std::string& val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, const std::string& val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, const std::string& val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, int val2, const std::string& val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, int val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, int val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, int val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, int val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, int val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, unsigned val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, unsigned val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, unsigned val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, unsigned val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, unsigned val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, float val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, float val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, float val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, float val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, float val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, double val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, double val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, double val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, double val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, double val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, const std::string& val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, const std::string& val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, const std::string& val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, const std::string& val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, unsigned val2, const std::string& val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, int val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, int val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, int val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, int val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, int val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, unsigned val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, unsigned val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, unsigned val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, unsigned val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, unsigned val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, float val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, float val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, float val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, float val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, float val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, double val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, double val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, double val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, double val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, double val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, const std::string& val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, const std::string& val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, const std::string& val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, const std::string& val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, float val2, const std::string& val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, int val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, int val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, int val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, int val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, int val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, unsigned val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, unsigned val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, unsigned val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, unsigned val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, unsigned val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, float val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, float val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, float val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, float val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, float val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, double val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, double val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, double val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, double val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, double val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, const std::string& val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, const std::string& val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, const std::string& val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, const std::string& val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, double val2, const std::string& val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, int val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, int val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, int val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, int val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, int val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, unsigned val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, unsigned val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, unsigned val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, unsigned val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, unsigned val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, float val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, float val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, float val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, float val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, float val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, double val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, double val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, double val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, double val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, double val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, const std::string& val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, const std::string& val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, const std::string& val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, const std::string& val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(unsigned val1, const std::string& val2, const std::string& val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_LONG;
    bndci_[0].is_unsigned = true;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, int val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, int val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, int val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, int val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, int val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, unsigned val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, unsigned val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, unsigned val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, unsigned val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, unsigned val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, float val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, float val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, float val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, float val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, float val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, double val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, double val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, double val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, double val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, double val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, const std::string& val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, const std::string& val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, const std::string& val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, const std::string& val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, int val2, const std::string& val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, int val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, int val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, int val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, int val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, int val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, unsigned val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, unsigned val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, unsigned val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, unsigned val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, unsigned val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, float val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, float val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, float val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, float val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, float val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, double val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, double val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, double val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, double val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, double val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, const std::string& val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, const std::string& val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, const std::string& val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, const std::string& val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, unsigned val2, const std::string& val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, int val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, int val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, int val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, int val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, int val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, unsigned val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, unsigned val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, unsigned val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, unsigned val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, unsigned val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, float val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, float val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, float val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, float val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, float val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, double val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, double val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, double val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, double val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, double val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, const std::string& val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, const std::string& val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, const std::string& val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, const std::string& val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, float val2, const std::string& val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, int val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, int val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, int val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, int val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, int val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, unsigned val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, unsigned val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, unsigned val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, unsigned val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, unsigned val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, float val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, float val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, float val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, float val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, float val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, double val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, double val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, double val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, double val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, double val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, const std::string& val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, const std::string& val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, const std::string& val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, const std::string& val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, double val2, const std::string& val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, int val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, int val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, int val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, int val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, int val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, unsigned val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, unsigned val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, unsigned val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, unsigned val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, unsigned val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, float val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, float val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, float val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, float val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, float val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, double val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, double val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, double val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, double val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, double val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, const std::string& val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, const std::string& val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, const std::string& val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, const std::string& val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(float val1, const std::string& val2, const std::string& val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, int val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, int val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, int val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, int val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, int val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, unsigned val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, unsigned val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, unsigned val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, unsigned val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, unsigned val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, float val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, float val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, float val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, float val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, float val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, double val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, double val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, double val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, double val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, double val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, const std::string& val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, const std::string& val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, const std::string& val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, const std::string& val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, int val2, const std::string& val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, int val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, int val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, int val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, int val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, int val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, unsigned val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, unsigned val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, unsigned val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, unsigned val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, unsigned val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, float val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, float val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, float val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, float val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, float val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, double val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, double val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, double val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, double val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, double val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, const std::string& val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, const std::string& val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, const std::string& val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, const std::string& val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, unsigned val2, const std::string& val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, int val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, int val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, int val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, int val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, int val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, unsigned val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, unsigned val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, unsigned val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, unsigned val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, unsigned val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, float val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, float val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, float val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, float val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, float val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, double val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, double val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, double val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, double val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, double val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, const std::string& val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, const std::string& val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, const std::string& val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, const std::string& val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, float val2, const std::string& val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, int val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, int val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, int val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, int val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, int val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, unsigned val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, unsigned val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, unsigned val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, unsigned val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, unsigned val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, float val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, float val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, float val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, float val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, float val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, double val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, double val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, double val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, double val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, double val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, const std::string& val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, const std::string& val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, const std::string& val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, const std::string& val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, double val2, const std::string& val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, int val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, int val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, int val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, int val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, int val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, unsigned val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, unsigned val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, unsigned val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, unsigned val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, unsigned val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, float val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, float val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, float val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, float val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, float val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, double val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, double val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, double val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, double val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, double val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, const std::string& val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, const std::string& val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, const std::string& val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, const std::string& val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(double val1, const std::string& val2, const std::string& val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    bndci_[0].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[0].buffer = (char*)&val1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, int val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, int val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, int val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, int val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, int val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, unsigned val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, unsigned val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, unsigned val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, unsigned val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, unsigned val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, float val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, float val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, float val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, float val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, float val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, double val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, double val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, double val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, double val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, double val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, const std::string& val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, const std::string& val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, const std::string& val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, const std::string& val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, int val2, const std::string& val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, int val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, int val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, int val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, int val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, int val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, unsigned val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, unsigned val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, unsigned val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, unsigned val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, unsigned val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, float val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, float val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, float val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, float val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, float val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, double val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, double val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, double val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, double val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, double val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, const std::string& val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, const std::string& val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, const std::string& val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, const std::string& val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, unsigned val2, const std::string& val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_LONG;
    bndci_[1].is_unsigned = true;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, int val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, int val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, int val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, int val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, int val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, unsigned val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, unsigned val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, unsigned val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, unsigned val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, unsigned val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, float val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, float val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, float val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, float val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, float val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, double val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, double val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, double val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, double val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, double val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, const std::string& val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, const std::string& val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, const std::string& val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, const std::string& val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, float val2, const std::string& val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, int val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, int val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, int val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, int val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, int val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, unsigned val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, unsigned val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, unsigned val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, unsigned val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, unsigned val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, float val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, float val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, float val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, float val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, float val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, double val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, double val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, double val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, double val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, double val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, const std::string& val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, const std::string& val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, const std::string& val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, const std::string& val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, double val2, const std::string& val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    bndci_[1].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[1].buffer = (char*)&val2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, int val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, int val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, int val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, int val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, int val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, unsigned val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, unsigned val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, unsigned val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, unsigned val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, unsigned val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_LONG;
    bndci_[2].is_unsigned = true;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, float val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, float val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, float val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, float val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, float val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, double val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, double val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, double val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, double val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, double val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    bndci_[2].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[2].buffer = (char*)&val3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, const std::string& val3, int val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, const std::string& val3, unsigned val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_LONG;
    bndci_[3].is_unsigned = true;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, const std::string& val3, float val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_FLOAT;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, const std::string& val3, double val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    bndci_[3].buffer_type = MYSQL_TYPE_DOUBLE;
    bndci_[3].buffer = (char*)&val4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}


unsigned Cdb::GetCount(const std::string& val1, const std::string& val2, const std::string& val3, const std::string& val4)
{
    memset(&bndci_, 0, sizeof(bndci_));

    char sz_val1[CDB_STR_BUF_LEN];
    unsigned long len1;

    strncpy(sz_val1, val1.c_str(), CDB_STR_LEN);
    sz_val1[CDB_STR_LEN] = EOS;
    len1 = strlen(sz_val1);

    bndci_[0].buffer_type = MYSQL_TYPE_STRING;
    bndci_[0].buffer = (char*)&sz_val1;
    bndci_[0].length = &len1;

    char sz_val2[CDB_STR_BUF_LEN];
    unsigned long len2;

    strncpy(sz_val2, val2.c_str(), CDB_STR_LEN);
    sz_val2[CDB_STR_LEN] = EOS;
    len2 = strlen(sz_val2);

    bndci_[1].buffer_type = MYSQL_TYPE_STRING;
    bndci_[1].buffer = (char*)&sz_val2;
    bndci_[1].length = &len2;

    char sz_val3[CDB_STR_BUF_LEN];
    unsigned long len3;

    strncpy(sz_val3, val3.c_str(), CDB_STR_LEN);
    sz_val3[CDB_STR_LEN] = EOS;
    len3 = strlen(sz_val3);

    bndci_[2].buffer_type = MYSQL_TYPE_STRING;
    bndci_[2].buffer = (char*)&sz_val3;
    bndci_[2].length = &len3;

    char sz_val4[CDB_STR_BUF_LEN];
    unsigned long len4;

    strncpy(sz_val4, val4.c_str(), CDB_STR_LEN);
    sz_val4[CDB_STR_LEN] = EOS;
    len4 = strlen(sz_val4);

    bndci_[3].buffer_type = MYSQL_TYPE_STRING;
    bndci_[3].buffer = (char*)&sz_val4;
    bndci_[3].length = &len4;

    if ( mysql_stmt_bind_param(sc_, bndci_) )
        ThrowSQL("Cdb::GetCount | mysql_stmt_bind_param");

    return getCount(sc_);
}



#endif   /* CDB_4_ARGS */



// ===========================================================================================
// End of GetCount
// ===========================================================================================












/* ---------------------------------------------------------------------------
   Get the first free slot for a new instance
--------------------------------------------------------------------------- */
void Cdb::setInstance(bool *slots)
{
    for ( int i=0; i<CDB_MAX_INSTANCES; ++i )
    {
        if ( !slots[i] )
        {
            slots[i] = true;
            instance_ = i;
            return;
        }
    }

    std::cout << "setInstance error: All available instances have been used.\n";
    std::cout << "You can increase CDB_MAX_INSTANCES in npp_mysql.h or reduce number of instances in your client code.\n";
    std::cout << "Current CDB_MAX_INSTANCES value is " << CDB_MAX_INSTANCES << std::endl;

    throw std::runtime_error("setInstance");
}


/* --------------------------------------------------------------------------
   Execute prepared query
-------------------------------------------------------------------------- */
void Cdb::openCursor(MYSQL_STMT *s)
{
    if ( mysql_stmt_execute(s) )
        ThrowSQL("Cdb::openCursor | mysql_stmt_execute");

    bindOutput(s);

    if ( mysql_stmt_store_result(s) )
        ThrowSQL("Cdb::openCursor | mysql_stmt_store_result");
}


/* --------------------------------------------------------------------------
   Execute prepared count query
-------------------------------------------------------------------------- */
unsigned Cdb::getCount(MYSQL_STMT *s)
{
    unsigned count;

    if ( mysql_stmt_execute(s) )
        ThrowSQL("Cdb::getCount | mysql_stmt_execute");

    memset(&bndco_, 0, sizeof(bndco_));

    bndco_[0].buffer_type = MYSQL_TYPE_LONG;
    bndco_[0].buffer = (char*)&count;

    if ( mysql_stmt_bind_result(s, bndco_) )
        ThrowSQL("Cdb::getCount | mysql_stmt_bind_result");

    if ( mysql_stmt_store_result(s) )
        ThrowSQL("Cdb::getCount | mysql_stmt_store_result");

    if ( mysql_stmt_fetch(s) )
        ThrowSQL("Cdb::getCount | mysql_stmt_fetch");

    return count;
}


/* ---------------------------------------------------------------------------
   Convert time string to MYSQL_TIME
   "15:45:00" or "154500"
--------------------------------------------------------------------------- */
void Cdb::set_time(MYSQL_TIME *ts, const char *str)
{
    int len = strlen(str);

    if ( len != 6 && len != 8 )
    {
        memset(ts, 0, sizeof(MYSQL_TIME));
        return;
    }

    char val[8];

    strncpy(val, str, 2);
    val[2] = EOS;
    ts->hour = atoi(val);

    strncpy(val, str+(len==6?2:3), 2);
    val[2] = EOS;
    ts->minute = atoi(val);

    strncpy(val, str+(len==6?4:6), 2);
    val[2] = EOS;
    ts->second = atoi(val);
}


/* ---------------------------------------------------------------------------
   Convert date string to MYSQL_TIME
   "2018-03-25" or "20180325"
--------------------------------------------------------------------------- */
void Cdb::set_date(MYSQL_TIME *ts, const char *str)
{
    int len = strlen(str);

    memset(ts, 0, sizeof(MYSQL_TIME));

    if ( len != 8 && len != 10 )
    {
        return;
    }

    char val[8];

    strncpy(val, str, 4);
    val[4] = EOS;
    ts->year = atoi(val);

    strncpy(val, str+(len==8?4:5), 2);
    val[2] = EOS;
    ts->month = atoi(val);

    strncpy(val, str+(len==8?6:8), 2);
    val[2] = EOS;
    ts->day = atoi(val);
}


/* ---------------------------------------------------------------------------
   Convert datetime/timestamp string to MYSQL_TIME
   "2018-03-25 15:45:00"
--------------------------------------------------------------------------- */
void Cdb::set_datetime(MYSQL_TIME *ts, const char *str)
{
    int len = strlen(str);

    memset(ts, 0, sizeof(MYSQL_TIME));

    if ( len != 19 )
    {
        return;
    }

    char val[8];

    strncpy(val, str, 4);
    val[4] = EOS;
    ts->year = atoi(val);

    strncpy(val, str+5, 2);
    val[2] = EOS;
    ts->month = atoi(val);

    strncpy(val, str+8, 2);
    val[2] = EOS;
    ts->day = atoi(val);

    strncpy(val, str+11, 2);
    val[2] = EOS;
    ts->hour = atoi(val);

    strncpy(val, str+14, 2);
    val[2] = EOS;
    ts->minute = atoi(val);

    strncpy(val, str+17, 2);
    val[2] = EOS;
    ts->second = atoi(val);
}


#endif  /* NPP_MYSQL */

#endif  /* __cplusplus */
